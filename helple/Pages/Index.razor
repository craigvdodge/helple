@page "/"

<PageTitle>Helple - A Tool For Wordle</PageTitle>
<div class="header">
    <div class="title-left"><img src="images/menu-burger.svg" height=40 width=40 alt="menu" @onclick="ShowHamburger" style="padding: 3px"/>
        <img src="images/interrogation.svg" height=40 width=40 alt="help" @onclick="ShowHelp" style="padding: 3px"/></div>
    <div class="title"><h1>Helple</h1></div>
    <div class="title-right"><img src="images/settings.svg" height=40 width=40 alt="settings" @onclick="ShowSettings" style="padding: 3px"/></div>
</div>
<div hidden="@hideGuessInput">
    <p class="text-center">
    <label>Word:</label>
    <input @bind="Guess" @onkeydown="OnGuessEnter" @oninput="OnGuessInput"/>
</p>
</div>
<div hidden="@hideGuessColorPicker">  
    <table class="table"> 
        <tbody class="text-center">
            <!-- This should be a loop but I keep getting bounds errors no matter what I do so here we are. -->
            <tr>
                <td><div @onclick="@(() => OnLetterTileClick(@ColorCodingArray[0].Letter, 0))">
                        <LetterBox Letter=@ColorCodingArray[0].Letter Coding=@ColorCodingArray[0].Code.ToString() />
                    </div>
                </td>
                <td><div @onclick="@(() => OnLetterTileClick(@ColorCodingArray[1].Letter, 1))">
                        <LetterBox Letter=@ColorCodingArray[1].Letter Coding=@ColorCodingArray[1].Code.ToString() />
                    </div>
                </td>
                <td><div @onclick="@(() => OnLetterTileClick(@ColorCodingArray[2].Letter, 2))">
                        <LetterBox Letter=@ColorCodingArray[2].Letter Coding=@ColorCodingArray[2].Code.ToString() />
                    </div>
                </td>
                <td><div @onclick="@(() => OnLetterTileClick(@ColorCodingArray[3].Letter, 3))">
                        <LetterBox Letter=@ColorCodingArray[3].Letter Coding=@ColorCodingArray[3].Code.ToString() />
                    </div>
                </td>
                <td><div @onclick="@(() => OnLetterTileClick(@ColorCodingArray[4].Letter, 4))">
                        <LetterBox Letter=@ColorCodingArray[4].Letter Coding=@ColorCodingArray[4].Code.ToString() />
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan=5>
                    <button @onclick="OnColorCodeClick">Filter list</button>
                </td>
            </tr>
        </tbody>
    </table> 
</div>
<div @ontouchstart="HandleTouchStart" @ontouchend="HandleTouchEnd">
    @if (@CurrentPage == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <p class="text-center">
            <img src="images/angle-square-left.svg" height="20" width="20" @onclick="@OnPageBack" alt="back"/>
            @PageHeader
            <img src="images/angle-square-right.svg" height="20" width="20" @onclick="@OnPageFwd" alt="forward"/>
        </p>
        <table class="table">
            <tbody>
                @for (int i=0; i<CurrentPage.Count; i+=@Columns)
                {
                    <tr>
                        @for(int j=0; j<@Columns; j++)
                        {
                            @if (i+j >= CurrentPage.Count)
                            {
                                <td></td>
                            }
                            else
                            {
                                <td>@CurrentPage[i+j]</td>
                            }
                        }                       
                    </tr>    
                }
        </tbody>
    </table>
    }   
</div>
<div>
    <label @onload="ReadWordsFile">@Message</label>
</div>

@inject HttpClient _client
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    void ShowHelp() => Modal.Show<Help>("About Helple");
    void ShowHamburger()
    {
        var options = new ModalOptions();
        options.Position = ModalPosition.TopLeft;
        Modal.Show<Hamburger>("Links", options);
    }
    async void ShowSettings()
    {
        var settingsModal = Modal.Show<Settings>("Settings");
        var results = await settingsModal.Result;
        // Get value from modal
        if (!results.Cancelled)
        {
            bool loadSettings = await LoadSettings();
            SortWordList(SortOrder);
            StateHasChanged();
        }
    }

    public const int Columns = 4;

    // "select" means user has not entered color code yet
    public enum ColorCode
    {
        Select=0,
        Black,
        Yellow,
        Green
    }

    public class ColorCodingInfo
    {
        public ColorCodingInfo(string letter)
        {
            Letter = letter;
            Code = ColorCode.Select;
            Duplicates = new List<int>();
        }
        public string Letter { get; set; }
        public ColorCode Code { get; set; }
        public List<int> Duplicates { get; set; }
    }

    public ColorCodingInfo[] ColorCodingArray = InitColorCodingArray();

    public static ColorCodingInfo[] InitColorCodingArray()
    {
        ColorCodingInfo[] retval = new ColorCodingInfo[5];
        for (int i=0; i<5; i++)
        {
            retval[i] = new ColorCodingInfo(string.Empty);
        }

        return retval;
    }

    private async void OnLetterTileClick(string l, int index)
    {
        int humanReadablePlace = index + 1;
        Console.WriteLine(index.ToString());
        var parameters = new ModalParameters();
        parameters.Add("Letter", l);

        var cc = Modal.Show<ColorCoder>("Letter " + humanReadablePlace.ToString() + ":", parameters);
        var result = await cc.Result;

        if (!result.Cancelled)
        {
            if (result.Data.ToString() == "Black")
            {
                ColorCodingArray[index].Code = ColorCode.Black;
            }
            else if (result.Data.ToString() == "Yellow")
            {
                ColorCodingArray[index].Code = ColorCode.Yellow;
            }
            else if (result.Data.ToString() == "Green")
            {
                ColorCodingArray[index].Code = ColorCode.Green;
            }
            StateHasChanged();
        }
    }

    private string? Guess { get; set; }
    private void OnGuessInput(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            Guess = e.Value.ToString();
        }
    }
    private void OnGuessEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (Guess == null || Guess.Length != 5)
            {
                Message = "Guess must be 5 characters.";
                return;
            }
            Guess = Guess.ToUpper();
            // TODO: more checking here
            Message = string.Empty;
            hideGuessColorPicker = false;
            hideGuessInput = true;

            // xfer Guess to ColorCodingInfo array
            for (int i=0; i<5; i++)
            {
                ColorCodingArray[i].Letter = Guess.Substring(i, 1);
                ColorCodingArray[i].Code = ColorCode.Select;
            }
        }
    }
    private bool hideGuessColorPicker = true;
    private bool hideGuessInput = false;

    private void OnGuessBtnClick()
    {
        hideGuessInput = false;
    }

    private void OnColorCodeClick()
    {
        // Validation

        for (int i=0; i<5; i++)
        {
            if (ColorCodingArray[i].Code == ColorCode.Select)
            {
                Message = ColorCodingArray[i].Letter + " color not selected";
                return;
            }
        }

        Message = string.Empty;

        GuessDupLetScan();

        // Filter word list
        List<HelpleDataFile.Entry> FilteredList = new List<HelpleDataFile.Entry>(Wordlist);
        for (int i=0; i<5; i++)
        {
            List<HelpleDataFile.Entry> NewFilteredList = FilteredWordList(FilteredList, ColorCodingArray[i], i);
            FilteredList = NewFilteredList;
        }
        Wordlist = FilteredList;
        CurrentPageNumber = 0;
        AllPages = Paginate(ref Wordlist);
        CurrentPage = AllPages[CurrentPageNumber];

        // Clean up 
        hideGuessColorPicker = true;
        hideGuessInput = false;
        Guess = null;
        foreach (ColorCodingInfo cci in ColorCodingArray)
        {
            cci.Letter = string.Empty;
            cci.Code = ColorCode.Select;
            cci.Duplicates.Clear();
        }
        foreach (ColorCodingInfo cci in ColorCodingArray)
        {
            cci.Code = ColorCode.Select;
        }
        Message = string.Empty;
    }

    private void GuessDupLetScan()
    {
        for (int i=0; i<5; i++)
        {
            for (int j=0; j<5; j++)
            {
                if (i == j)
                {
                    continue;
                }
                if (ColorCodingArray[i].Letter == ColorCodingArray[j].Letter)
                {
                    ColorCodingArray[i].Duplicates.Add(j);
                }
            }
        }
    }

    private List<HelpleDataFile.Entry> FilteredWordList(List<HelpleDataFile.Entry> words, ColorCodingInfo cc, int index)
    {
        List<HelpleDataFile.Entry> FilteredList = new List<HelpleDataFile.Entry>();
        switch (cc.Code)
        {
            case ColorCode.Black:
                {
                    // Black: word does not contain this letter. Remove all words that have this letter.
                    foreach (HelpleDataFile.Entry e in words)
                    {                           
                        if (!e.Word.Contains(cc.Letter))
                        {
                            FilteredList.Add(e);
                        } 
                        else // Duplicate edge case: if letter is at dupe, pass through too.
                        {
                            foreach (int dupe in cc.Duplicates)
                            {
                                if (e.Word[dupe] == cc.Letter[0])
                                {
                                    FilteredList.Add(e);
                                }
                            }
                        }
                    }
                    break;
                }
            case ColorCode.Yellow:
                {   
                    foreach (HelpleDataFile.Entry e in words)
                    {
                        if (e.Word.Contains(cc.Letter) && e.Word[index] != cc.Letter[0])
                        {
                            FilteredList.Add(e);
                        }
                    }
                    break;
                }
            case ColorCode.Green:
                {
                    foreach (HelpleDataFile.Entry e in words)
                    {
                        if (e.Word.Substring(index, 1) == cc.Letter)
                        {
                            FilteredList.Add(e);
                        }
                    }
                    break;
                }
            case ColorCode.Select:
                {
                    throw new ArgumentException("Color not specified: " + cc.Letter);
                }

        }
        return FilteredList;
    }

    public List<HelpleDataFile.Entry> Wordlist = new List<HelpleDataFile.Entry>();
    public List<string>? CurrentPage = null;
    public List<List<string>>? AllPages = null;
    public int CurrentPageNumber = 0;

    private List<List<string>> Paginate(ref List<HelpleDataFile.Entry> flatWordList, int pagesize = 40)
    {
        List<List<string>> retval = new List<List<string>>();

        int currentword = 0;
        retval.Add(new List<string>());
        int currentpage = 0;
        foreach (HelpleDataFile.Entry e in flatWordList)
        {
            retval[currentpage].Add(e.Word);
            currentword++;
            if ((currentword % pagesize) == 0) //we've reached pagesize
            {
                retval.Add(new List<string>()); //Add another page
                currentpage++;
            }
        }

        return retval;
    }

    private Settings.SortBy SortOrder;

    private async Task<bool> LoadSettings()
    {
        var tempSort = await localStorage.GetItemAsync<string>("sort");
        if (tempSort is null)
        {
            SortOrder = Settings.SortBy.Alphabetical;
        }
        else
        {
            string tempSortStr = (string)tempSort;
            if (tempSortStr == "Score")
            {
                SortOrder = Settings.SortBy.Score;
            }
            else if (tempSortStr == "Alphabetical")
            {
                SortOrder = Settings.SortBy.Alphabetical;
            }
            else
            {
                // Some kind of error. Log it to the console for detection
                Console.WriteLine("Unkown sort type: " + tempSortStr);
                SortOrder = Settings.SortBy.Alphabetical;
            }
        }
        return true;
    }

    private void SortWordList(Settings.SortBy Order)
    {
        switch (Order)
        {
            case Settings.SortBy.Alphabetical : Wordlist = Wordlist.OrderBy(o => o.Word).ToList(); break;
            case Settings.SortBy.Score : Wordlist = Wordlist.OrderByDescending(o => o.Score).ToList(); break;
            default : return; // IDK what you did to get here, but bail now.
        }
        AllPages = Paginate(ref Wordlist);
        CurrentPage = AllPages[CurrentPageNumber];
    }

    private string PageHeader
    {
        get
        {
            if (AllPages == null)
            {
                return string.Empty;
            }
            else
            {
                return "Page " + (CurrentPageNumber + 1).ToString() + " of " + AllPages.Count.ToString();
            }
        }
    }

    private void OnPageBack()
    {
        if (CurrentPageNumber <= 0 || AllPages == null) { return; }
        CurrentPageNumber--;
        CurrentPage = AllPages[CurrentPageNumber];
    }

    private void OnPageFwd()
    {
        if (AllPages == null || CurrentPageNumber >= AllPages.Count-1) { return; }
        CurrentPageNumber++;;
        CurrentPage = AllPages[CurrentPageNumber];
    }

    private double touchStartX = 0.0;
    private double touchStartY = 0.0;

    private void HandleTouchStart(TouchEventArgs t)
    {
        touchStartX = t.Touches[0].ClientX;
        touchStartY = t.Touches[0].ClientY;
    }

    private void HandleTouchEnd(TouchEventArgs t)
    {
        double touchEndX = t.ChangedTouches[0].ClientX;
        double yDiff = Math.Abs(touchStartY - t.ChangedTouches[0].ClientY);

        if ((yDiff < 80) && ((touchEndX - touchStartX) < -30))
        {
            OnPageFwd();
        }
        if ((yDiff < 80) && ((touchEndX - touchStartX) > 30))
        {
            OnPageBack();
        }

    }

    private async Task<bool> ReadWordsFile()
    {
        HelpleDataFile.DataFile dataFile = new HelpleDataFile.DataFile(_client);

        if (await dataFile.Read("words.txt"))
        {
            Wordlist.Clear();
            foreach (HelpleDataFile.Entry e in dataFile.Entries)
            {
                Wordlist.Add(e);
            }

            SortWordList(SortOrder);
            AllPages = Paginate(ref Wordlist);
            return true;
        }
        else
        {
            Message = "Error loading word list.";
            Console.WriteLine(dataFile.ExtendedInfo);
            return false;
        }
    }

    protected override async Task OnInitializedAsync()
    {   
        bool loadSettings = await LoadSettings();
        Message = "Loading word list...";
        bool loadSuccess = await ReadWordsFile();
        Message = string.Empty;
    }

    private string Message = string.Empty;

}