@page "/"

<PageTitle>Helple</PageTitle>

<h1>Helple Word List</h1>

<div>
    <label>@ErrMsg</label>
    <label @onload="ReadWordsFile">@Message</label>
</div>
<div hidden="@hideGuessBtn">
    <button @onclick="OnGuessBtnClick">Enter Guess</button>
</div>
<div hidden="@hideGuessInput">
    <p>
    <label>Enter word to guess:</label>
    <input @bind="Guess" />
    </p>
    <p>
    <label>Or:</label>
    <button @onclick="UseWordlistSelectionForGuess">Use word selected below</button>
    </p>
    <button @onclick="OnGuessClick">Filter list based on results of guess</button>
</div>
<div hidden="@hideGuessColorPicker">
    <div>
        <label>@ColorCodingArray[0].Letter</label>
        <select @bind="cc0">
            @foreach (var value in Enum.GetValues<ColorCode>())
            {
                <option>@value.ToString()</option>
            }
        </select>
    </div>
    <div>
        <label>@ColorCodingArray[1].Letter</label>
        <select @bind="cc1">
            @foreach (var value in Enum.GetValues<ColorCode>())
            {
                <option>@value.ToString()</option>
            }
        </select>
    </div>
    <div>
        <label>@ColorCodingArray[2].Letter</label>
        <select @bind="cc2">
            @foreach (var value in Enum.GetValues<ColorCode>())
            {
                <option>@value.ToString()</option>
            }
        </select>
    </div>
    <div>
        <label>@ColorCodingArray[3].Letter</label>
        <select @bind="cc3">
            @foreach (var value in Enum.GetValues<ColorCode>())
            {
                <option>@value.ToString()</option>
            }
        </select>
    </div>
    <div>
        <label>@ColorCodingArray[4].Letter</label>
        <select @bind="cc4">
            @foreach (var value in Enum.GetValues<ColorCode>())
            {
                <option>@value.ToString()</option>
            }
        </select>
    </div>
    <button @onclick="OnColorCodeClick">Filter list</button>
</div>
<div>
    <p>Word Suggestions</p>
    <select @bind="SelectedWord" size=20>
        @foreach (string word in Wordlist)
        {
            <option value="@word">@word</option>
        }
    </select>
    
</div>

@inject HttpClient _client

@code {
    // This is hella stupid, but I couldn't figure out how to bind the dropdown refering to an array memember. Brute force ftw.
    public ColorCode cc0;
    public ColorCode cc1;
    public ColorCode cc2;
    public ColorCode cc3;
    public ColorCode cc4;

    // "select" means user has not entered color code yet
    public enum ColorCode
    {
        Select=0,
        Black,
        Yellow,
        Green
    }

    public class ColorCodingInfo
    {
        public ColorCodingInfo(string letter)
        {
            Letter = letter;
            Code = ColorCode.Select;
            Duplicates = new List<int>();
        }
        public string Letter { get; set; }
        public ColorCode Code { get; set; }
        public List<int> Duplicates { get; set; }
    }

    public ColorCodingInfo[] ColorCodingArray = InitColorCodingArray();

    public static ColorCodingInfo[] InitColorCodingArray()
    {
        ColorCodingInfo[] retval = new ColorCodingInfo[5];
        for (int i=0; i<5; i++)
        {
            retval[i] = new ColorCodingInfo(string.Empty);
        }

        return retval;
    }

    private string? Guess { get; set; }
    private void OnGuessClick()
    {

        if (Guess == null || Guess.Length != 5)
        {
            ErrMsg = "Guess must be 5 characters.";
            return;
        }
        Guess = Guess.ToUpper();
        // TODO: more checking here
        ErrMsg = null;
        hideGuessColorPicker = false;
        hideGuessInput = true;      

        // xfer Guess to ColorCodingInfo array
        for (int i=0; i<5; i++)
        {
            ColorCodingArray[i].Letter = Guess.Substring(i, 1);
            ColorCodingArray[i].Code = ColorCode.Select;
        }

    }
    private string? ErrMsg;
    private bool hideGuessColorPicker = true;
    private bool hideGuessInput = true;
    private bool hideGuessBtn = false;

    private void OnGuessBtnClick()
    {
        hideGuessBtn = true;
        hideGuessInput = false;
    }

    private void OnColorCodeClick()
    {
        // xfer codes from ccx variables to ColorCodingArray
        ColorCodingArray[0].Code = cc0;
        ColorCodingArray[1].Code = cc1;
        ColorCodingArray[2].Code = cc2;
        ColorCodingArray[3].Code = cc3;
        ColorCodingArray[4].Code = cc4;

        // Validation

        for (int i=0; i<5; i++)
        {
            if (ColorCodingArray[i].Code == ColorCode.Select)
            {
                ErrMsg = ColorCodingArray[i].Letter + " color not selected";
                return;
            }
        }

        // TODO: replace ErrMsg with Message
        ErrMsg = string.Empty;

        GuessDupLetScan();

        // Filter word list
        List<string> FilteredList = new List<string>(Wordlist);
        for (int i=0; i<5; i++)
        {
            List<string> NewFilteredList = FilteredWordList(FilteredList, ColorCodingArray[i], i);
            FilteredList = NewFilteredList;
        }
        Wordlist = FilteredList;

        // Clean up 
        hideGuessColorPicker = true;
        hideGuessBtn = false;
        Guess = null;
        foreach (ColorCodingInfo cci in ColorCodingArray)
        {
            cci.Letter = string.Empty;
            cci.Code = ColorCode.Select;
            cci.Duplicates.Clear();
        }
        cc0 = ColorCode.Select;
        cc1 = ColorCode.Select;
        cc2 = ColorCode.Select;
        cc3 = ColorCode.Select;
        cc4 = ColorCode.Select;
        Message = string.Empty;
    }

    private void GuessDupLetScan()
    {
        for (int i=0; i<5; i++)
        {
            for (int j=0; j<5; j++)
            {
                if (i == j)
                {
                    continue;
                }
                if (ColorCodingArray[i].Letter == ColorCodingArray[j].Letter)
                {
                    ColorCodingArray[i].Duplicates.Add(j);
                }
            }
        }
    }

    private List<string> FilteredWordList(List<string> words, ColorCodingInfo cc, int index)
    {
        List<string> FilteredList = new List<string>();
        switch (cc.Code)
        {
            case ColorCode.Black:
                {
                    // Black: word does not contain this letter. Remove all words that have this letter.
                    foreach (string word in words)
                    {                           
                        if (!word.Contains(cc.Letter))
                        {
                            FilteredList.Add(word);
                        } 
                        else // Duplicate edge case: if letter is at dupe, pass through too.
                        {
                            foreach (int dupe in cc.Duplicates)
                            {
                                if (word[dupe] == cc.Letter[0])
                                {
                                    FilteredList.Add(word);
                                }
                            }
                        }
                    }
                    break;
                }
            case ColorCode.Yellow:
                {   
                    //TODO filtering, this just passes along unfiltered for now
                    FilteredList = words;
                    break;
                }
            case ColorCode.Green:
                {
                    foreach (string word in words)
                    {
                        if (word.Substring(index, 1) == cc.Letter)
                        {
                            FilteredList.Add(word);
                        }
                    }
                    break;
                }
            case ColorCode.Select:
                {
                    throw new ArgumentException("Filtering not specified: " + cc.Letter);
                }

        }
        return FilteredList;
    }

    public List<string> Wordlist = new List<string>();
    public string SelectedWord = string.Empty;

    private void UseWordlistSelectionForGuess()
    {
        Message = string.Empty;
        if (SelectedWord == string.Empty)
        {
            Message = "No word selected.";
        }
        Guess = SelectedWord;
    }

    private async Task<bool> ReadWordsFile()
    {
        try
        {
            var foo = _client.GetStringAsync("words.txt");
            await foo;
            string[] wordsTemp = foo.Result.Split(',', StringSplitOptions.RemoveEmptyEntries);
            Wordlist.Clear();
            foreach (string w in wordsTemp)
            {
                Wordlist.Add(w);
            }
            Message = string.Empty;
            return true;
        }
        catch (Exception e)
        {
            Message = "Error loading word list.";
            Console.WriteLine(e.Message);
            Task failed = Task.CompletedTask;
            return false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Message = "Loading word list...";

        bool loadSuccess = await ReadWordsFile();
    }

    private string Message = string.Empty;

}